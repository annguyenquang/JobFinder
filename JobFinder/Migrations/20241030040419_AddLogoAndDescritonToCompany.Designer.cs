// <auto-generated />
using System;
using JobFinder.DataAccess.Persistent;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobFinder.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241030040419_AddLogoAndDescritonToCompany")]
    partial class AddLogoAndDescritonToCompany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobFinder.Core.Entity.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f48748f2-9ed5-47f2-b7c9-b1de8d738f67"),
                            Email = "",
                            Password = "$2a$11$PwUZgDAC.rNaFK/sYXQ9ieJcrfEtG/itAzP982vyQXViwD8FVocEm",
                            Phone = "113",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("1b0b2d4c-5a8c-45f5-b294-063c78219065"),
                            Email = "",
                            Password = "$2a$11$cgP04FrhXqg135chpSgCRejtopszfhumxfcVk6grpCj0MU3xX.dd6",
                            Phone = "0123456789",
                            Username = "account0"
                        },
                        new
                        {
                            Id = new Guid("7ce665e7-3c17-4de1-b90c-6816ad5e9900"),
                            Email = "",
                            Password = "$2a$11$lEfoBX93qCcjR/DXciwWQ.sJrgZ3wrAzrh71k3qnsF5Z/OzYKl7BO",
                            Phone = "0823456789",
                            Username = "account1"
                        },
                        new
                        {
                            Id = new Guid("0b6e77a9-1a1a-4421-b741-e515fd607b4b"),
                            Email = "",
                            Password = "$2a$11$xAaFhES7rz79WDbIyXFCp.9HeFm1eB4bw5PAt8R2LqcEso.S/zBgu",
                            Phone = "0183456789",
                            Username = "account2"
                        },
                        new
                        {
                            Id = new Guid("fe78eae5-581d-4221-b806-f5e42f30ea7f"),
                            Email = "",
                            Password = "$2a$11$NeXh9Yt1WpYEG5rf60/oz.v.TuEMYgSCAcjWawZd7z/pwuFa1jica",
                            Phone = "0128456789",
                            Username = "account3"
                        },
                        new
                        {
                            Id = new Guid("e89e0267-ebc9-4e8b-9df3-335315b0890f"),
                            Email = "",
                            Password = "$2a$11$OYLkmx8F1ah46KLG5Zspa.CUxMtYOGSkMtqi96Fh4eVuhBxeYwhvG",
                            Phone = "0123856789",
                            Username = "account4"
                        });
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("EmailContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4438ea3f-3eaf-45f2-8717-b9e123cd4360"),
                            AccountId = new Guid("f48748f2-9ed5-47f2-b7c9-b1de8d738f67"),
                            Address = "123 Tech Lane",
                            Description = "",
                            DistrictId = 0,
                            EmailContact = "info@techcorp.com",
                            EmployeeCount = 500,
                            Industry = "Technology",
                            Logo = "",
                            Name = "Tech Corp",
                            Nation = "USA",
                            PhoneContact = "123456789",
                            ProvinceId = 0,
                            Slug = "tech-corp",
                            Website = "www.techcorp.com"
                        },
                        new
                        {
                            Id = new Guid("1bee4af0-1878-4e02-9b8a-d173631ce5e8"),
                            AccountId = new Guid("1b0b2d4c-5a8c-45f5-b294-063c78219065"),
                            Address = "456 Health Blvd",
                            Description = "",
                            DistrictId = 0,
                            EmailContact = "info@healthinc.com",
                            EmployeeCount = 300,
                            Industry = "Healthcare",
                            Logo = "",
                            Name = "Health Inc.",
                            Nation = "USA",
                            PhoneContact = "987654321",
                            ProvinceId = 0,
                            Slug = "health-inc",
                            Website = "www.healthinc.com"
                        },
                        new
                        {
                            Id = new Guid("70529ace-2558-4a85-a612-f26dafef89d2"),
                            AccountId = new Guid("7ce665e7-3c17-4de1-b90c-6816ad5e9900"),
                            Address = "45688 London",
                            Description = "",
                            DistrictId = 0,
                            EmailContact = "info@AnRe.com",
                            EmployeeCount = 300,
                            Industry = "IT",
                            Logo = "",
                            Name = "An Inc.",
                            Nation = "VN",
                            PhoneContact = "98765432112",
                            ProvinceId = 0,
                            Slug = "an-pro-ga",
                            Website = "www.Anrp.com"
                        });
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CommitmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<Guid?>("EducationLevelRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GenderRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("MaxAgeRequirement")
                        .HasColumnType("int");

                    b.Property<int?>("MinAgeRequirement")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkArrangementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkExperienceRequirementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommitmentTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EducationLevelRequirementId");

                    b.HasIndex("GenderRequirementId");

                    b.HasIndex("WorkArrangementId");

                    b.HasIndex("WorkExperienceRequirementId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("affb0c72-f5ae-4dc1-9c85-0809403b7cfa"),
                            CloseDate = new DateTime(2025, 1, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(505),
                            CommitmentTypeId = new Guid("540f318e-b42f-4485-9e60-8faa5bf80962"),
                            CompanyId = new Guid("4438ea3f-3eaf-45f2-8717-b9e123cd4360"),
                            CreatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(536),
                            Description = "Develop and maintain web applications.",
                            DistrictId = 10,
                            EducationLevelRequirementId = new Guid("bc4ecf1e-8841-47f2-86ec-b0c523f03da1"),
                            GenderRequirementId = new Guid("79685cdb-be26-49cc-b7f9-1fb51686f5ba"),
                            MaxAgeRequirement = 35,
                            MinAgeRequirement = 21,
                            ProvinceId = 1,
                            Salary = 80000.0,
                            Status = 1,
                            Title = "Software Engineer",
                            UpdatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(537),
                            WorkArrangementId = new Guid("04a9de34-0869-41b2-87a8-63c20c4ba22a"),
                            WorkExperienceRequirementId = new Guid("67db1aef-c1b1-4424-8313-774a5dccdb9d")
                        },
                        new
                        {
                            Id = new Guid("40759c71-828d-4590-ad33-8c0316e05d2e"),
                            CloseDate = new DateTime(2024, 12, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(554),
                            CommitmentTypeId = new Guid("5d06c3b1-2bd1-4c68-96b4-f4cd8c899dff"),
                            CompanyId = new Guid("1bee4af0-1878-4e02-9b8a-d173631ce5e8"),
                            CreatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(560),
                            Description = "Analyze large datasets to generate business insights.",
                            DistrictId = 15,
                            EducationLevelRequirementId = new Guid("bc44b9a9-5cd6-4195-a7bd-92b4bef6d8fb"),
                            GenderRequirementId = new Guid("7b5f69cb-5996-4a57-b9c6-9fee2a791bf6"),
                            MaxAgeRequirement = 40,
                            MinAgeRequirement = 23,
                            ProvinceId = 2,
                            Salary = 60000.0,
                            Status = 1,
                            Title = "Data Analyst",
                            UpdatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(560),
                            WorkArrangementId = new Guid("376764fa-28ec-4a08-80e3-a6ab407e8601"),
                            WorkExperienceRequirementId = new Guid("bf38a1b9-dee3-455a-87c1-4e034fe806f7")
                        },
                        new
                        {
                            Id = new Guid("e015e2c2-9f1e-4bae-a690-99f1ce776f40"),
                            CloseDate = new DateTime(2025, 2, 28, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(640),
                            CommitmentTypeId = new Guid("540f318e-b42f-4485-9e60-8faa5bf80962"),
                            CompanyId = new Guid("70529ace-2558-4a85-a612-f26dafef89d2"),
                            CreatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(645),
                            Description = "Oversee product development lifecycle.",
                            DistrictId = 20,
                            EducationLevelRequirementId = new Guid("a3fb036a-04fc-4590-b87d-6ed32e2ec692"),
                            GenderRequirementId = new Guid("12497687-64b8-4d8e-814a-b7d1d33d3aab"),
                            MaxAgeRequirement = 45,
                            MinAgeRequirement = 28,
                            ProvinceId = 3,
                            Salary = 95000.0,
                            Status = 1,
                            Title = "Product Manager",
                            UpdatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(646),
                            WorkArrangementId = new Guid("c199da74-c2fb-4381-b093-cf2f1e3e8f06"),
                            WorkExperienceRequirementId = new Guid("646ccd9f-aa2f-413e-8d3e-eb8ab0b14c96")
                        },
                        new
                        {
                            Id = new Guid("0ba58892-48d8-477b-9833-cd2381003fbc"),
                            CloseDate = new DateTime(2025, 1, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(649),
                            CommitmentTypeId = new Guid("44b668b2-09ee-499e-af95-73598f9153a2"),
                            CompanyId = new Guid("4438ea3f-3eaf-45f2-8717-b9e123cd4360"),
                            CreatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(653),
                            Description = "Design intuitive user interfaces.",
                            DistrictId = 25,
                            EducationLevelRequirementId = new Guid("bc4ecf1e-8841-47f2-86ec-b0c523f03da1"),
                            GenderRequirementId = new Guid("79685cdb-be26-49cc-b7f9-1fb51686f5ba"),
                            MaxAgeRequirement = 38,
                            MinAgeRequirement = 24,
                            ProvinceId = 4,
                            Salary = 70000.0,
                            Status = 1,
                            Title = "UX Designer",
                            UpdatedAt = new DateTime(2024, 10, 30, 11, 4, 19, 120, DateTimeKind.Local).AddTicks(653),
                            WorkArrangementId = new Guid("04a9de34-0869-41b2-87a8-63c20c4ba22a"),
                            WorkExperienceRequirementId = new Guid("cc4121b2-72c2-4226-ad12-24e722b50cc2")
                        });
                });

            modelBuilder.Entity("JobFinder.Core.Entity.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CVLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metadatas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("540f318e-b42f-4485-9e60-8faa5bf80962"),
                            Type = 0,
                            Value = "{\"data\"}: \"Fulltime\"}"
                        },
                        new
                        {
                            Id = new Guid("5d06c3b1-2bd1-4c68-96b4-f4cd8c899dff"),
                            Type = 0,
                            Value = "{\"data\"}: \"PartTime\"}"
                        },
                        new
                        {
                            Id = new Guid("3fbef738-ed16-4778-8463-8390444841de"),
                            Type = 0,
                            Value = "{\"data\"}: \"Internship\"}"
                        },
                        new
                        {
                            Id = new Guid("26a49bd7-ad8c-40be-8e7c-dd903f7a653e"),
                            Type = 0,
                            Value = "{\"data\"}: \"Freelance\"}"
                        },
                        new
                        {
                            Id = new Guid("44b668b2-09ee-499e-af95-73598f9153a2"),
                            Type = 0,
                            Value = "{\"data\"}: \"Contract\"}"
                        },
                        new
                        {
                            Id = new Guid("96279c48-1bfe-441d-992e-db86cb3bf315"),
                            Type = 0,
                            Value = "{\"data\"}: \"Daily\"}"
                        },
                        new
                        {
                            Id = new Guid("04a9de34-0869-41b2-87a8-63c20c4ba22a"),
                            Type = 1,
                            Value = "{\"data\"}: \"Onsite\"}"
                        },
                        new
                        {
                            Id = new Guid("376764fa-28ec-4a08-80e3-a6ab407e8601"),
                            Type = 1,
                            Value = "{\"data\"}: \"Remote/WFH\"}"
                        },
                        new
                        {
                            Id = new Guid("c199da74-c2fb-4381-b093-cf2f1e3e8f06"),
                            Type = 1,
                            Value = "{\"data\"}: \"Hybrid\"}"
                        },
                        new
                        {
                            Id = new Guid("fbce1042-bce0-47a3-92cc-54e3b86eb570"),
                            Type = 2,
                            Value = "{\"data\"}: \"FreshGradute\"}"
                        },
                        new
                        {
                            Id = new Guid("4a3e2365-47f4-45d9-b1d4-326d9f2f3203"),
                            Type = 2,
                            Value = "{\"data\"}: \"LessThanOneYear\"}"
                        },
                        new
                        {
                            Id = new Guid("cc4121b2-72c2-4226-ad12-24e722b50cc2"),
                            Type = 2,
                            Value = "{\"data\"}: \"OneToThreeYears\"}"
                        },
                        new
                        {
                            Id = new Guid("67db1aef-c1b1-4424-8313-774a5dccdb9d"),
                            Type = 2,
                            Value = "{\"data\"}: \"ThreeToFiveYears\"}"
                        },
                        new
                        {
                            Id = new Guid("bf38a1b9-dee3-455a-87c1-4e034fe806f7"),
                            Type = 2,
                            Value = "{\"data\"}: \"FiveToTenYears\"}"
                        },
                        new
                        {
                            Id = new Guid("646ccd9f-aa2f-413e-8d3e-eb8ab0b14c96"),
                            Type = 2,
                            Value = "{\"data\"}: \"MoreThanTenYears\"}"
                        },
                        new
                        {
                            Id = new Guid("ceb115a0-3ffe-455c-b24e-9eff074e1ec1"),
                            Type = 3,
                            Value = "{\"data\"}: \"PrimarySchool\"}"
                        },
                        new
                        {
                            Id = new Guid("c9d2f457-06bf-40ad-9a4a-d6e201888129"),
                            Type = 3,
                            Value = "{\"data\"}: \"SecondarySchool\"}"
                        },
                        new
                        {
                            Id = new Guid("52e22ea6-7f97-4816-b64a-bfd4aa21cd74"),
                            Type = 3,
                            Value = "{\"data\"}: \"SeniorOrVocationalHighSchool\"}"
                        },
                        new
                        {
                            Id = new Guid("ebb6a034-ce37-41a4-b1f6-c70f1698c4f2"),
                            Type = 3,
                            Value = "{\"data\"}: \"Diploma\"}"
                        },
                        new
                        {
                            Id = new Guid("a3fb036a-04fc-4590-b87d-6ed32e2ec692"),
                            Type = 3,
                            Value = "{\"data\"}: \"CollegeDegree\"}"
                        },
                        new
                        {
                            Id = new Guid("bc4ecf1e-8841-47f2-86ec-b0c523f03da1"),
                            Type = 3,
                            Value = "{\"data\"}: \"BachelorDegree\"}"
                        },
                        new
                        {
                            Id = new Guid("bc44b9a9-5cd6-4195-a7bd-92b4bef6d8fb"),
                            Type = 3,
                            Value = "{\"data\"}: \"MasterDegree\"}"
                        },
                        new
                        {
                            Id = new Guid("853384de-154c-4187-bf5d-aa684b85736d"),
                            Type = 3,
                            Value = "{\"data\"}: \"Doctorate\"}"
                        },
                        new
                        {
                            Id = new Guid("79685cdb-be26-49cc-b7f9-1fb51686f5ba"),
                            Type = 4,
                            Value = "{\"data\"}: \"Male\"}"
                        },
                        new
                        {
                            Id = new Guid("7b5f69cb-5996-4a57-b9c6-9fee2a791bf6"),
                            Type = 4,
                            Value = "{\"data\"}: \"Female\"}"
                        },
                        new
                        {
                            Id = new Guid("12497687-64b8-4d8e-814a-b7d1d33d3aab"),
                            Type = 4,
                            Value = "{\"data\"}: \"Others\"}"
                        });
                });

            modelBuilder.Entity("JobFinder.Core.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Company", b =>
                {
                    b.HasOne("JobFinder.Core.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Job", b =>
                {
                    b.HasOne("JobFinder.Core.Entity.Metadata", "CommitmentType")
                        .WithMany("CommitmentTypeJobs")
                        .HasForeignKey("CommitmentTypeId");

                    b.HasOne("JobFinder.Core.Entity.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Core.Entity.Metadata", "EducationLevelRequirement")
                        .WithMany("EducationLevelRequirementJobs")
                        .HasForeignKey("EducationLevelRequirementId");

                    b.HasOne("JobFinder.Core.Entity.Metadata", "GenderRequirement")
                        .WithMany("GenderRequirementJobs")
                        .HasForeignKey("GenderRequirementId");

                    b.HasOne("JobFinder.Core.Entity.Metadata", "WorkArrangement")
                        .WithMany("WorkArrangementJobs")
                        .HasForeignKey("WorkArrangementId");

                    b.HasOne("JobFinder.Core.Entity.Metadata", "WorkExperienceRequirement")
                        .WithMany("WorkExperienceRequirementJobs")
                        .HasForeignKey("WorkExperienceRequirementId");

                    b.Navigation("CommitmentType");

                    b.Navigation("Company");

                    b.Navigation("EducationLevelRequirement");

                    b.Navigation("GenderRequirement");

                    b.Navigation("WorkArrangement");

                    b.Navigation("WorkExperienceRequirement");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.JobApplication", b =>
                {
                    b.HasOne("JobFinder.Core.Entity.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobFinder.Core.Entity.User", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.User", b =>
                {
                    b.HasOne("JobFinder.Core.Entity.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Job", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.Metadata", b =>
                {
                    b.Navigation("CommitmentTypeJobs");

                    b.Navigation("EducationLevelRequirementJobs");

                    b.Navigation("GenderRequirementJobs");

                    b.Navigation("WorkArrangementJobs");

                    b.Navigation("WorkExperienceRequirementJobs");
                });

            modelBuilder.Entity("JobFinder.Core.Entity.User", b =>
                {
                    b.Navigation("JobApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
